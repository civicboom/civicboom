#!/usr/bin/python

import optparse
import pylons
from civicboom.lib.worker_threads.process_media import process_media
from paste.deploy import appconfig
from civicboom.config.environment import load_environment
from civicboom.lib.services import warehouse as wh
from civicboom.model.meta import Session
from civicboom.model import Media
import os
import urllib2

import logging
logging.basicConfig(
    level   = logging.INFO,
    format  = "%(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s",
    datefmt = "%H:%M:%S"
)
log = logging.getLogger(__name__)


if __name__ == '__main__':
    option_parser = optparse.OptionParser()
    option_parser.add_option('--ini',
        help='INI file to use for pylons settings',
        type='str', default='development.ini')
    option_parser.add_option('--prefix',
        help='which folder to sync',
        type='str', default='avatars')
    options, args = option_parser.parse_args()

    # Initialize the Pylons app
    conf = appconfig('config:' + options.ini, relative_to='.')
    load_environment(conf.global_conf, conf.local_conf)

    # Now code can be run, the SQLalchemy Session can be used, etc.

    for m in Session.query(Media):
        print m.type, m.hash
        if m.type == "audio":
            if not os.path.exists(m.hash):
                log.info("Downloading %s" % m.hash)
                u = urllib2.urlopen("http://"+pylons.config['warehouse_url']+"/media-original/"+m.hash).read()
                file(m.hash, "w").write(u)
            log.info("Processing %s" % m.hash)
            process_media(m.hash, m.hash, m.type, m.name, False)
