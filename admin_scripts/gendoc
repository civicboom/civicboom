#!/usr/bin/python

from glob import glob
import re
import sys
import os.path
from optparse import OptionParser


class Param(object):
    def __init__(self, text):
        lines = text.split("\n")
        if " " in lines[0]:
            (self.name, self.desc) = lines[0].split(" ", 1)
        else:
            self.name = lines[0]
            self.desc = ""
        self.values = filter(lambda x: len(x) > 0, [l.strip() for l in lines[1:]])

    def __str__(self):
        r = ""
        r = r + self.name+" - "+self.desc+"\n"
        if self.values:
            r = r + "<ul>\n"+"\n".join(["<li>"+v for v in self.values])+"\n</ul>"
        return r

class Return(object):
    def __init__(self, text):
        lines = text.split("\n")
        (self.code, self.desc) = lines[0].split(" ", 1)
        datalines = filter(lambda x: " " in x, [l.strip() for l in lines[1:]])
        self.datas = [dl.split(" ", 1) for dl in datalines]

    def __str__(self):
        r = ""
        r = r + self.code + " - " + self.desc + "\n"
        if self.datas:
            r = r + (
                "<ul>\n"+
                    "\n".join([("<li>%s - %s" % tuple(d)) for d in self.datas])+
                "\n</ul>"
            )
        return r


class Doc(object):
    def find(self, tag):
        m = re.search("@"+tag+" ([^@]*)", self.text, re.DOTALL)
        if m:
            return m.group(1).strip()
        else:
            return None

    def findall(self, tag):
        return re.findall("@"+tag+" ([^@]*)", self.text, re.DOTALL)

    def __cmp__(self, b):
        cmp_sect = cmp(self.section, b.section)
        if cmp_sect != 0:
            return cmp_sect
        elif hasattr(self, 'title'):
            return -1
        elif hasattr(self, 'method') and hasattr(b, 'method'):
            slashes = cmp(len(self.method.split("/")), len(b.method.split("/")))
            if slashes != 0:
                return slashes
            else:
                gppd = {
                    "GET": 0,
                    "POST": 1,
                    "PUT": 2,
                    "DELETE": 3
                }
                return cmp(gppd[self.method.split()[0]], gppd[b.method.split()[0]])
        else:
            return 1


class FuncDoc(Doc):
    def __init__(self, text):
        lines = filter(lambda x: " " in x, [l.strip() for l in text.split("\n")])
        self.text = text
        (self.method, self.desc) = lines[0].split(":", 2)
        (self.section, self.api_version) = self.find("api").split(" ", 1)
        self.params = [Param(p) for p in self.findall("param")]
        self.returns = [Return(r) for r in self.findall("return")]
        self.comments = [cl.split(" ", 1) for cl in self.findall("comment")]
        self.full = ""
        for line in lines[1:]:
            if line[0] == "@":
                break
            self.full = self.full + "\n" + line

    def __str__(self):
        params = "\n".join(["<li>"+str(p) for p in self.params])
        returns = "\n".join(["<li>"+str(r) for r in self.returns])
        dt = ""
        if self.comments:
            dt = (
                "\n".join([("<p><em>%s</em> - %s" % tuple(d)) for d in self.comments])+"\n"
            )
        return (
            "<section>\n"+
            "<h3 id='"+self.method+"'><span>"+self.api_version+"</span>"+self.method+" - "+self.desc+"</h3>\n"+
            "<div>"+
            "<p>"+self.full+"</p>" +
            ("<h4>Paramaters</h4>\n<ul>"+params+"</ul>" if params else "")+
            ("<h4>Return Data</h4>\n<ul>"+returns+"</ul>" if returns else "")+
            dt+
            "</div>"+
            "</section>\n\n"
        )


class VerbDoc(Doc):
    def __init__(self, text):
        self.text = text
        self.title = self.find("title")
        self.section = self.find("doc")
        self.desc = self.find("desc")

    def __str__(self):
        return "<h2 id='"+self.section+"'>"+self.title+"</h2>\n<div>"+self.desc+"</div>"


#
# Read the @doc and @api sections out of the files, store them
# in the right section
#

def scan(folder):
    sections = {}
    for controller in glob(os.path.join(folder, "*.py")):
        print "Scanning "+controller

        data = file(controller).read()
        for doc in data.split('"""'):
            if "@doc" in doc:
                d = VerbDoc(doc)
                if d.section not in sections:
                    sections[d.section] = {'head': [], 'items': []}
                sections[d.section]['head'].append(d)
            if "@api" in doc:
                d = FuncDoc(doc)
                if d.section not in sections:
                    sections[d.section] = {'head': [], 'items': []}
                sections[d.section]['items'].append(d)
    return sections


#
# Write out the HTML
#

def to_html(template_dir, sections):
    html = ""

    html = html + file(template_dir+"api.head.html").read()

    # main TOC
    html = html + "<ul>"
    for section in sections.values():
        for doc in section['head']:
            html = html + "<li><a href='#%s'>%s</a>\n" % (doc.section, doc.title)
    html = html + "</ul>"

    # main intro
    html = html + file(template_dir+"api.body.html").read()

    # main body
    for section in sections.values():
        html = html + "<article>"
        # chapter intro
        for doc in section['head']:
            html = html + (str(doc))

        # chapter TOC
        html = html + "<ul>"
        section['items'].sort()
        for doc in section['items']:
            html = html + "<li><a href='#%s'>%s</a>\n" % (doc.method, doc.method+" - "+doc.desc)
        html = html + "</ul>"

        # chapter body
        for doc in section['items']:
            html = html + str(doc)
        html = html + "</article>"

    # main footer
    html = html + file(template_dir+"api.foot.html").read()

    return html


def main(input_dir, template_dir, output):
    sections = scan(input_dir)
    html = to_html(template_dir, sections)
    file(output, "w").write(html)

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-i", "--input-dir", dest="input_dir",
        help="scan this controllers DIR", metavar="DIR")
    parser.add_option("-t", "--template-dir", dest="template_dir",
        help="pick up api.head/body/foot.html from DIR", metavar="DIR")
    parser.add_option("-o", "--output", dest="output",
        help="write output to FILE", metavar="FILE")
    (options, args) = parser.parse_args()

    if options.input_dir and options.template_dir and options.output:
        sys.exit(main(options.input_dir, options.template_dir, options.output))
    else:
        print "Missing option"
        sys.exit(1)
